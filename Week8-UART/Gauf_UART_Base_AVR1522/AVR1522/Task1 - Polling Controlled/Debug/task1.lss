
task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000342  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00802000  00000342  000003b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003940  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003378  00000000  00000000  00003da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001c8  00000000  00000000  00007120  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000038  00000000  00000000  000072e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000273d  00000000  00000000  00007320  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011a  00000000  00000000  00009a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00009b77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
   4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
   8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
   c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  10:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  14:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  18:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  1c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  20:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  24:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  28:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  2c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  30:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  34:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  38:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  3c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  40:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  44:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  48:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  4c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  50:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  54:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  58:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  5c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  60:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  64:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  68:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  6c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  70:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  74:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  78:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  7c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  80:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  84:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  88:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  8c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  90:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  94:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  98:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  9c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  a0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  a4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  a8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  ac:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  b0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  b4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  b8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  bc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  c0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  c4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  c8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  cc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  d0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  d4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  d8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  dc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  e0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  e4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  e8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  ec:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  f0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  f4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  f8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  fc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 100:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 104:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 108:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 10c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 110:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 114:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 118:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 11c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 120:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 124:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 128:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 12c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 130:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 134:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 138:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 13c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 140:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 144:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 148:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 14c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 150:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 154:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 158:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 15c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 160:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 164:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 168:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 16c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 170:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 174:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 178:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 17c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 180:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 184:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 188:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 18c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 190:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 194:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 198:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 19c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1a0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1a4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1a8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1ac:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1b0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1b4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1b8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1bc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1c0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1c4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1c8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1cc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1d0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1d4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1d8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1dc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1e0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1e4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1e8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1ec:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1f0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	cd bf       	out	0x3d, r28	; 61
 1fc:	df e3       	ldi	r29, 0x3F	; 63
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e2 e4       	ldi	r30, 0x42	; 66
 214:	f3 e0       	ldi	r31, 0x03	; 3
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a0 32       	cpi	r26, 0x20	; 32
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1b be       	out	0x3b, r1	; 59
 228:	0e 94 1a 01 	call	0x234	; 0x234 <main>
 22c:	0c 94 9f 01 	jmp	0x33e	; 0x33e <_exit>

00000230 <__bad_interrupt>:
 230:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000234 <main>:


void debugBlink(unsigned);

int main(void)
{
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	c2 50       	subi	r28, 0x02	; 2
 23e:	d2 40       	sbci	r29, 0x02	; 2
 240:	cd bf       	out	0x3d, r28	; 61
 242:	de bf       	out	0x3e, r29	; 62

	//watching for transfer errors not in spec
	//bool TransferError = false;

	/* Pin 3 (TX) as output */
	USART_PORT.DIRSET   = PIN3_bm;   
 244:	e0 e4       	ldi	r30, 0x40	; 64
 246:	f6 e0       	ldi	r31, 0x06	; 6
 248:	88 e0       	ldi	r24, 0x08	; 8
 24a:	81 83       	std	Z+1, r24	; 0x01
	/* Pin 2 (RX) as input */
	USART_PORT.DIRCLR   = PIN2_bm;
 24c:	84 e0       	ldi	r24, 0x04	; 4
 24e:	82 83       	std	Z+2, r24	; 0x02

	/* USARTx0, 8 Data bits, No Parity, 1 Stop bit */
	USART.CTRLC = (uint8_t) USART_CHSIZE_8BIT_gc 
 250:	e0 ea       	ldi	r30, 0xA0	; 160
 252:	f8 e0       	ldi	r31, 0x08	; 8
 254:	83 e0       	ldi	r24, 0x03	; 3
 256:	85 83       	std	Z+5, r24	; 0x05
	 * Example (9600bps)  :   - I/O clock = 2MHz
	 *                        - 9600bps can be achieved by 9600bps / 2^0
	 *                        - UBRR = 2MHz/(16*9600)-1 = 12.02
	 *                        - ScaleFactor = 0
	 */
	USART.BAUDCTRLA = BSEL_VALUE;
 258:	8c e0       	ldi	r24, 0x0C	; 12
 25a:	86 83       	std	Z+6, r24	; 0x06

	/* Enable both RX and TX */
	USART.CTRLB |= USART_RXEN_bm;
 25c:	84 81       	ldd	r24, Z+4	; 0x04
 25e:	80 61       	ori	r24, 0x10	; 16
 260:	84 83       	std	Z+4, r24	; 0x04
	USART.CTRLB |= USART_TXEN_bm;
 262:	84 81       	ldd	r24, Z+4	; 0x04
 264:	88 60       	ori	r24, 0x08	; 8
 266:	84 83       	std	Z+4, r24	; 0x04
	
	//store data messages as predefined strings
	#define WAITMSG_SIZE	20
	#define RECMSG_SIZE		10
	#define ENDMSG_SIZE		4
	char waitingMsg[WAITMSG_SIZE] = "|Enter any char: ";
 268:	82 e1       	ldi	r24, 0x12	; 18
 26a:	e0 e0       	ldi	r30, 0x00	; 0
 26c:	f0 e2       	ldi	r31, 0x20	; 32
 26e:	de 01       	movw	r26, r28
 270:	af 51       	subi	r26, 0x1F	; 31
 272:	be 4f       	sbci	r27, 0xFE	; 254
 274:	01 90       	ld	r0, Z+
 276:	0d 92       	st	X+, r0
 278:	8a 95       	dec	r24
 27a:	e1 f7       	brne	.-8      	; 0x274 <main+0x40>
 27c:	cd 50       	subi	r28, 0x0D	; 13
 27e:	de 4f       	sbci	r29, 0xFE	; 254
 280:	18 82       	st	Y, r1
 282:	19 82       	std	Y+1, r1	; 0x01
 284:	c3 5f       	subi	r28, 0xF3	; 243
 286:	d1 40       	sbci	r29, 0x01	; 1
	char receivedMsg[RECMSG_SIZE] = "Received: ";
 288:	8a e0       	ldi	r24, 0x0A	; 10
 28a:	e4 e1       	ldi	r30, 0x14	; 20
 28c:	f0 e2       	ldi	r31, 0x20	; 32
 28e:	de 01       	movw	r26, r28
 290:	ab 50       	subi	r26, 0x0B	; 11
 292:	be 4f       	sbci	r27, 0xFE	; 254
 294:	01 90       	ld	r0, Z+
 296:	0d 92       	st	X+, r0
 298:	8a 95       	dec	r24
 29a:	e1 f7       	brne	.-8      	; 0x294 <main+0x60>
	char endMsg[ENDMSG_SIZE] = "   |";
 29c:	80 e2       	ldi	r24, 0x20	; 32
 29e:	90 e2       	ldi	r25, 0x20	; 32
 2a0:	c1 50       	subi	r28, 0x01	; 1
 2a2:	de 4f       	sbci	r29, 0xFE	; 254
 2a4:	88 83       	st	Y, r24
 2a6:	99 83       	std	Y+1, r25	; 0x01
 2a8:	cf 5f       	subi	r28, 0xFF	; 255
 2aa:	d1 40       	sbci	r29, 0x01	; 1
 2ac:	80 e2       	ldi	r24, 0x20	; 32
 2ae:	9c e7       	ldi	r25, 0x7C	; 124
 2b0:	cf 5f       	subi	r28, 0xFF	; 255
 2b2:	dd 4f       	sbci	r29, 0xFD	; 253
 2b4:	88 83       	st	Y, r24
 2b6:	99 83       	std	Y+1, r25	; 0x01
 2b8:	c1 50       	subi	r28, 0x01	; 1
 2ba:	d2 40       	sbci	r29, 0x02	; 2
	
	
	while(1){
		//let them know we're waiting
		for(int i =0; i<WAITMSG_SIZE;i++){
			USART.DATA = waitingMsg[i];
 2bc:	e0 ea       	ldi	r30, 0xA0	; 160
 2be:	f8 e0       	ldi	r31, 0x08	; 8
 2c0:	de 01       	movw	r26, r28
 2c2:	af 51       	subi	r26, 0x1F	; 31
 2c4:	be 4f       	sbci	r27, 0xFE	; 254
 2c6:	9d 01       	movw	r18, r26
 2c8:	2c 5e       	subi	r18, 0xEC	; 236
 2ca:	3f 4f       	sbci	r19, 0xFF	; 255
 2cc:	8d 91       	ld	r24, X+
 2ce:	80 83       	st	Z, r24
			while ((USART.STATUS & USART_DREIF_bm) == 0){}
 2d0:	81 81       	ldd	r24, Z+1	; 0x01
 2d2:	85 ff       	sbrs	r24, 5
 2d4:	fd cf       	rjmp	.-6      	; 0x2d0 <main+0x9c>
	char endMsg[ENDMSG_SIZE] = "   |";
	
	
	while(1){
		//let them know we're waiting
		for(int i =0; i<WAITMSG_SIZE;i++){
 2d6:	2a 17       	cp	r18, r26
 2d8:	3b 07       	cpc	r19, r27
 2da:	c1 f7       	brne	.-16     	; 0x2cc <main+0x98>
			USART.DATA = waitingMsg[i];
			while ((USART.STATUS & USART_DREIF_bm) == 0){}
		}
		//Wait for serial receive on RX
		while ((USART.STATUS & USART_RXCIF_bm) == 0){}
 2dc:	81 81       	ldd	r24, Z+1	; 0x01
 2de:	88 23       	and	r24, r24
 2e0:	ec f7       	brge	.-6      	; 0x2dc <main+0xa8>
		//once received store in rxbuf
		Rx_Buf[0] = USART.DATA;
 2e2:	80 81       	ld	r24, Z
 2e4:	cf 50       	subi	r28, 0x0F	; 15
 2e6:	df 4f       	sbci	r29, 0xFF	; 255
 2e8:	88 83       	st	Y, r24
 2ea:	c1 5f       	subi	r28, 0xF1	; 241
 2ec:	d0 40       	sbci	r29, 0x00	; 0
 2ee:	de 01       	movw	r26, r28
 2f0:	ab 50       	subi	r26, 0x0B	; 11
 2f2:	be 4f       	sbci	r27, 0xFE	; 254
 2f4:	9d 01       	movw	r18, r26
 2f6:	26 5f       	subi	r18, 0xF6	; 246
 2f8:	3f 4f       	sbci	r19, 0xFF	; 255
		
		//msg to notify we're echoing
		for(int i =0; i<RECMSG_SIZE;i++){
			USART.DATA = receivedMsg[i];
 2fa:	8d 91       	ld	r24, X+
 2fc:	80 83       	st	Z, r24
			while ((USART.STATUS & USART_DREIF_bm) == 0){}
 2fe:	81 81       	ldd	r24, Z+1	; 0x01
 300:	85 ff       	sbrs	r24, 5
 302:	fd cf       	rjmp	.-6      	; 0x2fe <main+0xca>
		while ((USART.STATUS & USART_RXCIF_bm) == 0){}
		//once received store in rxbuf
		Rx_Buf[0] = USART.DATA;
		
		//msg to notify we're echoing
		for(int i =0; i<RECMSG_SIZE;i++){
 304:	2a 17       	cp	r18, r26
 306:	3b 07       	cpc	r19, r27
 308:	c1 f7       	brne	.-16     	; 0x2fa <main+0xc6>
			USART.DATA = receivedMsg[i];
			while ((USART.STATUS & USART_DREIF_bm) == 0){}
		}
	
		//send back char recd
		Tx_Buf[0] = Rx_Buf[0];
 30a:	cf 50       	subi	r28, 0x0F	; 15
 30c:	df 4f       	sbci	r29, 0xFF	; 255
 30e:	88 81       	ld	r24, Y
 310:	c1 5f       	subi	r28, 0xF1	; 241
 312:	d0 40       	sbci	r29, 0x00	; 0
 314:	89 83       	std	Y+1, r24	; 0x01
		USART.DATA = Tx_Buf[0];
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	80 83       	st	Z, r24
		while ((USART.STATUS & USART_DREIF_bm) == 0){}
 31a:	81 81       	ldd	r24, Z+1	; 0x01
 31c:	85 ff       	sbrs	r24, 5
 31e:	fd cf       	rjmp	.-6      	; 0x31a <main+0xe6>
 320:	de 01       	movw	r26, r28
 322:	a1 50       	subi	r26, 0x01	; 1
 324:	be 4f       	sbci	r27, 0xFE	; 254
 326:	9d 01       	movw	r18, r26
 328:	2c 5f       	subi	r18, 0xFC	; 252
 32a:	3f 4f       	sbci	r19, 0xFF	; 255
			
		//wrap up the line nicely
		//probably replace with newline but Tera Term wasn't reading \n
		for(int i =0; i<ENDMSG_SIZE;i++){
			USART.DATA = endMsg[i];
 32c:	8d 91       	ld	r24, X+
 32e:	80 83       	st	Z, r24
			while ((USART.STATUS & USART_DREIF_bm) == 0){}
 330:	81 81       	ldd	r24, Z+1	; 0x01
 332:	85 ff       	sbrs	r24, 5
 334:	fd cf       	rjmp	.-6      	; 0x330 <main+0xfc>
		USART.DATA = Tx_Buf[0];
		while ((USART.STATUS & USART_DREIF_bm) == 0){}
			
		//wrap up the line nicely
		//probably replace with newline but Tera Term wasn't reading \n
		for(int i =0; i<ENDMSG_SIZE;i++){
 336:	a2 17       	cp	r26, r18
 338:	b3 07       	cpc	r27, r19
 33a:	c1 f7       	brne	.-16     	; 0x32c <main+0xf8>
 33c:	c1 cf       	rjmp	.-126    	; 0x2c0 <main+0x8c>

0000033e <_exit>:
 33e:	f8 94       	cli

00000340 <__stop_program>:
 340:	ff cf       	rjmp	.-2      	; 0x340 <__stop_program>
