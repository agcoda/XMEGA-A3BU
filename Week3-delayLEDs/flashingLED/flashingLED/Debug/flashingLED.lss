
flashingLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00802000  000002a0  00000314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000316  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003598  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003272  00000000  00000000  00003964  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b7  00000000  00000000  00006bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00007090  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00004e9a  00000000  00000000  00007108  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000186  00000000  00000000  0000bfa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000c128  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000036  00000000  00000000  0000c170  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	12 c1       	rjmp	.+548    	; 0x22a <__bad_interrupt>
   6:	00 00       	nop
   8:	10 c1       	rjmp	.+544    	; 0x22a <__bad_interrupt>
   a:	00 00       	nop
   c:	0e c1       	rjmp	.+540    	; 0x22a <__bad_interrupt>
   e:	00 00       	nop
  10:	0c c1       	rjmp	.+536    	; 0x22a <__bad_interrupt>
  12:	00 00       	nop
  14:	0a c1       	rjmp	.+532    	; 0x22a <__bad_interrupt>
  16:	00 00       	nop
  18:	08 c1       	rjmp	.+528    	; 0x22a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	06 c1       	rjmp	.+524    	; 0x22a <__bad_interrupt>
  1e:	00 00       	nop
  20:	04 c1       	rjmp	.+520    	; 0x22a <__bad_interrupt>
  22:	00 00       	nop
  24:	02 c1       	rjmp	.+516    	; 0x22a <__bad_interrupt>
  26:	00 00       	nop
  28:	00 c1       	rjmp	.+512    	; 0x22a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	fe c0       	rjmp	.+508    	; 0x22a <__bad_interrupt>
  2e:	00 00       	nop
  30:	fc c0       	rjmp	.+504    	; 0x22a <__bad_interrupt>
  32:	00 00       	nop
  34:	fa c0       	rjmp	.+500    	; 0x22a <__bad_interrupt>
  36:	00 00       	nop
  38:	f8 c0       	rjmp	.+496    	; 0x22a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	f6 c0       	rjmp	.+492    	; 0x22a <__bad_interrupt>
  3e:	00 00       	nop
  40:	f4 c0       	rjmp	.+488    	; 0x22a <__bad_interrupt>
  42:	00 00       	nop
  44:	f2 c0       	rjmp	.+484    	; 0x22a <__bad_interrupt>
  46:	00 00       	nop
  48:	f0 c0       	rjmp	.+480    	; 0x22a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ee c0       	rjmp	.+476    	; 0x22a <__bad_interrupt>
  4e:	00 00       	nop
  50:	ec c0       	rjmp	.+472    	; 0x22a <__bad_interrupt>
  52:	00 00       	nop
  54:	ea c0       	rjmp	.+468    	; 0x22a <__bad_interrupt>
  56:	00 00       	nop
  58:	e8 c0       	rjmp	.+464    	; 0x22a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e6 c0       	rjmp	.+460    	; 0x22a <__bad_interrupt>
  5e:	00 00       	nop
  60:	e4 c0       	rjmp	.+456    	; 0x22a <__bad_interrupt>
  62:	00 00       	nop
  64:	e2 c0       	rjmp	.+452    	; 0x22a <__bad_interrupt>
  66:	00 00       	nop
  68:	e0 c0       	rjmp	.+448    	; 0x22a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	de c0       	rjmp	.+444    	; 0x22a <__bad_interrupt>
  6e:	00 00       	nop
  70:	dc c0       	rjmp	.+440    	; 0x22a <__bad_interrupt>
  72:	00 00       	nop
  74:	da c0       	rjmp	.+436    	; 0x22a <__bad_interrupt>
  76:	00 00       	nop
  78:	d8 c0       	rjmp	.+432    	; 0x22a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	d6 c0       	rjmp	.+428    	; 0x22a <__bad_interrupt>
  7e:	00 00       	nop
  80:	d4 c0       	rjmp	.+424    	; 0x22a <__bad_interrupt>
  82:	00 00       	nop
  84:	d2 c0       	rjmp	.+420    	; 0x22a <__bad_interrupt>
  86:	00 00       	nop
  88:	d0 c0       	rjmp	.+416    	; 0x22a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ce c0       	rjmp	.+412    	; 0x22a <__bad_interrupt>
  8e:	00 00       	nop
  90:	cc c0       	rjmp	.+408    	; 0x22a <__bad_interrupt>
  92:	00 00       	nop
  94:	ca c0       	rjmp	.+404    	; 0x22a <__bad_interrupt>
  96:	00 00       	nop
  98:	c8 c0       	rjmp	.+400    	; 0x22a <__bad_interrupt>
  9a:	00 00       	nop
  9c:	c6 c0       	rjmp	.+396    	; 0x22a <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c4 c0       	rjmp	.+392    	; 0x22a <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c2 c0       	rjmp	.+388    	; 0x22a <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c0 c0       	rjmp	.+384    	; 0x22a <__bad_interrupt>
  aa:	00 00       	nop
  ac:	be c0       	rjmp	.+380    	; 0x22a <__bad_interrupt>
  ae:	00 00       	nop
  b0:	bc c0       	rjmp	.+376    	; 0x22a <__bad_interrupt>
  b2:	00 00       	nop
  b4:	ba c0       	rjmp	.+372    	; 0x22a <__bad_interrupt>
  b6:	00 00       	nop
  b8:	b8 c0       	rjmp	.+368    	; 0x22a <__bad_interrupt>
  ba:	00 00       	nop
  bc:	b6 c0       	rjmp	.+364    	; 0x22a <__bad_interrupt>
  be:	00 00       	nop
  c0:	b4 c0       	rjmp	.+360    	; 0x22a <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b2 c0       	rjmp	.+356    	; 0x22a <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b0 c0       	rjmp	.+352    	; 0x22a <__bad_interrupt>
  ca:	00 00       	nop
  cc:	ae c0       	rjmp	.+348    	; 0x22a <__bad_interrupt>
  ce:	00 00       	nop
  d0:	ac c0       	rjmp	.+344    	; 0x22a <__bad_interrupt>
  d2:	00 00       	nop
  d4:	aa c0       	rjmp	.+340    	; 0x22a <__bad_interrupt>
  d6:	00 00       	nop
  d8:	a8 c0       	rjmp	.+336    	; 0x22a <__bad_interrupt>
  da:	00 00       	nop
  dc:	a6 c0       	rjmp	.+332    	; 0x22a <__bad_interrupt>
  de:	00 00       	nop
  e0:	a4 c0       	rjmp	.+328    	; 0x22a <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a2 c0       	rjmp	.+324    	; 0x22a <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a0 c0       	rjmp	.+320    	; 0x22a <__bad_interrupt>
  ea:	00 00       	nop
  ec:	9e c0       	rjmp	.+316    	; 0x22a <__bad_interrupt>
  ee:	00 00       	nop
  f0:	9c c0       	rjmp	.+312    	; 0x22a <__bad_interrupt>
  f2:	00 00       	nop
  f4:	9a c0       	rjmp	.+308    	; 0x22a <__bad_interrupt>
  f6:	00 00       	nop
  f8:	98 c0       	rjmp	.+304    	; 0x22a <__bad_interrupt>
  fa:	00 00       	nop
  fc:	96 c0       	rjmp	.+300    	; 0x22a <__bad_interrupt>
  fe:	00 00       	nop
 100:	94 c0       	rjmp	.+296    	; 0x22a <__bad_interrupt>
 102:	00 00       	nop
 104:	92 c0       	rjmp	.+292    	; 0x22a <__bad_interrupt>
 106:	00 00       	nop
 108:	90 c0       	rjmp	.+288    	; 0x22a <__bad_interrupt>
 10a:	00 00       	nop
 10c:	8e c0       	rjmp	.+284    	; 0x22a <__bad_interrupt>
 10e:	00 00       	nop
 110:	8c c0       	rjmp	.+280    	; 0x22a <__bad_interrupt>
 112:	00 00       	nop
 114:	8a c0       	rjmp	.+276    	; 0x22a <__bad_interrupt>
 116:	00 00       	nop
 118:	88 c0       	rjmp	.+272    	; 0x22a <__bad_interrupt>
 11a:	00 00       	nop
 11c:	86 c0       	rjmp	.+268    	; 0x22a <__bad_interrupt>
 11e:	00 00       	nop
 120:	84 c0       	rjmp	.+264    	; 0x22a <__bad_interrupt>
 122:	00 00       	nop
 124:	82 c0       	rjmp	.+260    	; 0x22a <__bad_interrupt>
 126:	00 00       	nop
 128:	80 c0       	rjmp	.+256    	; 0x22a <__bad_interrupt>
 12a:	00 00       	nop
 12c:	7e c0       	rjmp	.+252    	; 0x22a <__bad_interrupt>
 12e:	00 00       	nop
 130:	7c c0       	rjmp	.+248    	; 0x22a <__bad_interrupt>
 132:	00 00       	nop
 134:	7a c0       	rjmp	.+244    	; 0x22a <__bad_interrupt>
 136:	00 00       	nop
 138:	78 c0       	rjmp	.+240    	; 0x22a <__bad_interrupt>
 13a:	00 00       	nop
 13c:	76 c0       	rjmp	.+236    	; 0x22a <__bad_interrupt>
 13e:	00 00       	nop
 140:	74 c0       	rjmp	.+232    	; 0x22a <__bad_interrupt>
 142:	00 00       	nop
 144:	72 c0       	rjmp	.+228    	; 0x22a <__bad_interrupt>
 146:	00 00       	nop
 148:	70 c0       	rjmp	.+224    	; 0x22a <__bad_interrupt>
 14a:	00 00       	nop
 14c:	6e c0       	rjmp	.+220    	; 0x22a <__bad_interrupt>
 14e:	00 00       	nop
 150:	6c c0       	rjmp	.+216    	; 0x22a <__bad_interrupt>
 152:	00 00       	nop
 154:	6a c0       	rjmp	.+212    	; 0x22a <__bad_interrupt>
 156:	00 00       	nop
 158:	68 c0       	rjmp	.+208    	; 0x22a <__bad_interrupt>
 15a:	00 00       	nop
 15c:	66 c0       	rjmp	.+204    	; 0x22a <__bad_interrupt>
 15e:	00 00       	nop
 160:	64 c0       	rjmp	.+200    	; 0x22a <__bad_interrupt>
 162:	00 00       	nop
 164:	62 c0       	rjmp	.+196    	; 0x22a <__bad_interrupt>
 166:	00 00       	nop
 168:	60 c0       	rjmp	.+192    	; 0x22a <__bad_interrupt>
 16a:	00 00       	nop
 16c:	5e c0       	rjmp	.+188    	; 0x22a <__bad_interrupt>
 16e:	00 00       	nop
 170:	5c c0       	rjmp	.+184    	; 0x22a <__bad_interrupt>
 172:	00 00       	nop
 174:	5a c0       	rjmp	.+180    	; 0x22a <__bad_interrupt>
 176:	00 00       	nop
 178:	58 c0       	rjmp	.+176    	; 0x22a <__bad_interrupt>
 17a:	00 00       	nop
 17c:	56 c0       	rjmp	.+172    	; 0x22a <__bad_interrupt>
 17e:	00 00       	nop
 180:	54 c0       	rjmp	.+168    	; 0x22a <__bad_interrupt>
 182:	00 00       	nop
 184:	52 c0       	rjmp	.+164    	; 0x22a <__bad_interrupt>
 186:	00 00       	nop
 188:	50 c0       	rjmp	.+160    	; 0x22a <__bad_interrupt>
 18a:	00 00       	nop
 18c:	4e c0       	rjmp	.+156    	; 0x22a <__bad_interrupt>
 18e:	00 00       	nop
 190:	4c c0       	rjmp	.+152    	; 0x22a <__bad_interrupt>
 192:	00 00       	nop
 194:	4a c0       	rjmp	.+148    	; 0x22a <__bad_interrupt>
 196:	00 00       	nop
 198:	48 c0       	rjmp	.+144    	; 0x22a <__bad_interrupt>
 19a:	00 00       	nop
 19c:	46 c0       	rjmp	.+140    	; 0x22a <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	44 c0       	rjmp	.+136    	; 0x22a <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	42 c0       	rjmp	.+132    	; 0x22a <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	40 c0       	rjmp	.+128    	; 0x22a <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	3e c0       	rjmp	.+124    	; 0x22a <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	3c c0       	rjmp	.+120    	; 0x22a <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	3a c0       	rjmp	.+116    	; 0x22a <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	38 c0       	rjmp	.+112    	; 0x22a <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	36 c0       	rjmp	.+108    	; 0x22a <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	34 c0       	rjmp	.+104    	; 0x22a <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	32 c0       	rjmp	.+100    	; 0x22a <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	30 c0       	rjmp	.+96     	; 0x22a <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	2e c0       	rjmp	.+92     	; 0x22a <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	2c c0       	rjmp	.+88     	; 0x22a <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	2a c0       	rjmp	.+84     	; 0x22a <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	28 c0       	rjmp	.+80     	; 0x22a <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	26 c0       	rjmp	.+76     	; 0x22a <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	24 c0       	rjmp	.+72     	; 0x22a <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	22 c0       	rjmp	.+68     	; 0x22a <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	20 c0       	rjmp	.+64     	; 0x22a <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	1e c0       	rjmp	.+60     	; 0x22a <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	1c c0       	rjmp	.+56     	; 0x22a <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	1a c0       	rjmp	.+52     	; 0x22a <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	18 c0       	rjmp	.+48     	; 0x22a <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e0 ea       	ldi	r30, 0xA0	; 160
 214:	f2 e0       	ldi	r31, 0x02	; 2
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a2 30       	cpi	r26, 0x02	; 2
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1e d0       	rcall	.+60     	; 0x264 <main>
 228:	39 c0       	rjmp	.+114    	; 0x29c <_exit>

0000022a <__bad_interrupt>:
 22a:	ea ce       	rjmp	.-556    	; 0x0 <__vectors>

0000022c <HmSDelay>:
		HmSDelay();
	}
}

//Use register read to delay approximately 100ms.
void HmSDelay(){
 22c:	88 e9       	ldi	r24, 0x98	; 152
 22e:	9b e2       	ldi	r25, 0x2B	; 43
	*(p_regAddress) = Value;
}

//read value in Regaddress and return 
volatile unsigned char ReadReg(volatile unsigned char * p_regAddress){
	return *(p_regAddress);
 230:	e7 ee       	ldi	r30, 0xE7	; 231
 232:	f7 e0       	ldi	r31, 0x07	; 7
 234:	20 81       	ld	r18, Z
 236:	01 97       	sbiw	r24, 0x01	; 1
	}
}

//Use register read to delay approximately 100ms.
void HmSDelay(){
	for(int i=0;i<H_MS_DELAY_CT;i++){
 238:	e9 f7       	brne	.-6      	; 0x234 <HmSDelay+0x8>
		ReadReg((volatile unsigned char *)PORTB_LED_STATE);
	}
			
}
 23a:	08 95       	ret

0000023c <Delay>:
volatile unsigned char ReadReg(volatile unsigned char * p_regAddress){
	return *(p_regAddress);
}

//delay an integer number of 100ms (ds)
void Delay(int dS){
 23c:	0f 93       	push	r16
 23e:	1f 93       	push	r17
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
	for(int i =0; i<dS;i++){
 244:	18 16       	cp	r1, r24
 246:	19 06       	cpc	r1, r25
 248:	44 f4       	brge	.+16     	; 0x25a <Delay+0x1e>
 24a:	8c 01       	movw	r16, r24
 24c:	c0 e0       	ldi	r28, 0x00	; 0
 24e:	d0 e0       	ldi	r29, 0x00	; 0
		HmSDelay();
 250:	ed df       	rcall	.-38     	; 0x22c <HmSDelay>
	return *(p_regAddress);
}

//delay an integer number of 100ms (ds)
void Delay(int dS){
	for(int i =0; i<dS;i++){
 252:	21 96       	adiw	r28, 0x01	; 1
 254:	0c 17       	cp	r16, r28
 256:	1d 07       	cpc	r17, r29
 258:	d9 f7       	brne	.-10     	; 0x250 <Delay+0x14>
		HmSDelay();
	}
}
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	1f 91       	pop	r17
 260:	0f 91       	pop	r16
 262:	08 95       	ret

00000264 <main>:
	}
}

//write Value to RegAddress 
void WriteReg(volatile unsigned char * p_regAddress, unsigned char Value){
	*(p_regAddress) = Value;
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	80 93 e0 07 	sts	0x07E0, r24	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7007e0>

int main (void)

{
	static unsigned char ledStates[2] = {0xff, 0xfc}; //{all off, all on}
	unsigned char stateSwitch = 1;
 26a:	81 e0       	ldi	r24, 0x01	; 1
	}
}

//write Value to RegAddress 
void WriteReg(volatile unsigned char * p_regAddress, unsigned char Value){
	*(p_regAddress) = Value;
 26c:	07 ee       	ldi	r16, 0xE7	; 231
 26e:	17 e0       	ldi	r17, 0x07	; 7
	//set PORTB DATA direction (DDRB) as output
	WriteReg((volatile unsigned char *)PORTB_DATA,0xff);
			
	while(1){
		//Alternate writing ..00 and ..11 to the LED register
		WriteReg((volatile unsigned char *)PORTB_LED_STATE,ledStates[stateSwitch]);
 270:	c8 2f       	mov	r28, r24
 272:	d0 e0       	ldi	r29, 0x00	; 0
 274:	fe 01       	movw	r30, r28
 276:	e0 50       	subi	r30, 0x00	; 0
 278:	f0 4e       	sbci	r31, 0xE0	; 224
 27a:	80 81       	ld	r24, Z
	}
}

//write Value to RegAddress 
void WriteReg(volatile unsigned char * p_regAddress, unsigned char Value){
	*(p_regAddress) = Value;
 27c:	f8 01       	movw	r30, r16
 27e:	80 83       	st	Z, r24
	while(1){
		//Alternate writing ..00 and ..11 to the LED register
		WriteReg((volatile unsigned char *)PORTB_LED_STATE,ledStates[stateSwitch]);
		
		//delay 15*100ms should give ~1.5s per on/off cycle
		Delay(15);
 280:	8f e0       	ldi	r24, 0x0F	; 15
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	db df       	rcall	.-74     	; 0x23c <Delay>
		
		stateSwitch = (stateSwitch+1)%2; 
 286:	ce 01       	movw	r24, r28
 288:	01 96       	adiw	r24, 0x01	; 1
 28a:	81 70       	andi	r24, 0x01	; 1
 28c:	90 78       	andi	r25, 0x80	; 128
 28e:	99 23       	and	r25, r25
 290:	7c f7       	brge	.-34     	; 0x270 <main+0xc>
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	8e 6f       	ori	r24, 0xFE	; 254
 296:	9f 6f       	ori	r25, 0xFF	; 255
 298:	01 96       	adiw	r24, 0x01	; 1
 29a:	ea cf       	rjmp	.-44     	; 0x270 <main+0xc>

0000029c <_exit>:
 29c:	f8 94       	cli

0000029e <__stop_program>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <__stop_program>
